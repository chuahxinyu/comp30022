generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  contact        String?
  accounts       Account[]
  sessions       Session[]
  CustomContact  CustomContact[]
  connector UserConnection[] @relation("connector")
  connected  UserConnection[] @relation("connected")
}

model CustomContact {
  id      String  @id @default(cuid())
  userId  String
  name    String
  email   String
  contact String?
  image   String?
  tags    String
  notes   String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserConnection {
  userId_1 String 
  userId_2 String 
  tags     String
  notes    String
  user1    User   @relation("connector", fields: [userId_1], references: [id], onDelete: Cascade)
  user2    User   @relation("connected", fields: [userId_2], references: [id], onDelete: Cascade)

  @@id([userId_1, userId_2])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
