generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  contact          String?
  restoreCode      String?
  restoreExpiry    DateTime?
  accounts         Account[]
  sessions         Session[]
  tasks            Task[]
  CustomContact    CustomContact[]
  connector        UserConnection[] @relation("connector")
  connected        UserConnection[] @relation("connected")
  events           CalendarEvent[]  @relation("ownedEvents")
  invitedEvents    CalendarEvent[]  @relation("invitedEvents")
  sentMessages     ChatMessage[]    @relation("sentMessages")
  receivedMessages ChatMessage[]    @relation("receivedMessages")
}

model CustomContact {
  id      String          @id @default(cuid())
  userId  String
  name    String
  email   String
  contact String?
  image   String?
  tags    String
  notes   String
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  events  CalendarEvent[]

  @@unique([email, userId])
}

model UserConnection {
  userId_1 String
  userId_2 String
  tags     String
  notes    String
  user1    User   @relation("connector", fields: [userId_1], references: [id], onDelete: Cascade)
  user2    User   @relation("connected", fields: [userId_2], references: [id], onDelete: Cascade)

  @@id([userId_1, userId_2])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CalendarEvent {
  id             String          @id @default(cuid())
  title          String
  start          DateTime
  end            DateTime
  location       String?
  notes          String?         @db.Text
  colour         String
  ownerId        String
  owner          User            @relation("ownedEvents", fields: [ownerId], references: [id], onDelete: Cascade)
  invitees       User[]          @relation("invitedEvents")
  customInvitees CustomContact[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  status      String
  // connections User[]
}

model ChatMessage {
  id         String   @id @default(cuid())
  message    String
  createdAt  DateTime @default(now())
  senderId   String
  sender     User     @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  isRead     Boolean  @default(false)
}
